@using EPiServer.Shell
@using Tuohy.Epi.Docs.Controllers
@using Tuohy.Epi.Docs.Models
@model Tuohy.Epi.Docs.Models.ViewModels.ContentTypeViewModel
@{
    Layout = "~/modules/Tuohy.Epi.Docs/Views/Shared/Layouts/_DocumentationLayoutPage.cshtml";

    var featuredContentExists = Model.FocusedContentTypeDoc != null;
}

@if (Model.IsEditMode)
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tinymce/4.5.3/tinymce.min.js"></script>
    <script>
        tinymce.init({
            selector: 'textarea',
            plugins: "image link textcolor colorpicker directionality table code",
            default_link_target: "_blank"
        });
    </script>
}

<main>
    @if (featuredContentExists)
    {
        <div class="heading primary-colour text-colour">
            <h1>@Model.FocusedContentTypeDoc.Name - @Model.FocusedContentTypeDoc.Group</h1>
            @if (Model.CanEdit)
            {
                if (!Model.IsEditMode)
                {
                    <a class="btn-floating btn-large right secondary-colour text-colour" href="@Paths.ToResource(typeof(DocumentationController), "documentation?edit=1&ctid=" + Model.FocusedContentTypeId)"><i class="small material-icons">mode_edit</i></a>
                }
            }
        </div>
        <div class="doc-container">
            <div class="document">
                <p class="flow-text">@Model.FocusedContentTypeDoc.Description</p>
                @if (Model.FocusedContentTypeType == ContentTypeEnum.Media && !string.IsNullOrWhiteSpace(((MediaDoc)Model.FocusedContentTypeDoc).MediaDescriptors))
                {
                    <p class="flow-text">Valid extensions: @(((MediaDoc)Model.FocusedContentTypeDoc).MediaDescriptors)</p>
                }
                @if (Model.IsEditMode)
                {
                    <form action="@Url.Action("Save", "Documentation")">
                        <input type="hidden" name="contentTypeId" id="contentTypeId" value="@Model.FocusedContentTypeDoc.Id" />
                        <textarea name="markup" id="markup">@Html.Raw(Model.CustomDocumentation)</textarea>
                        <button class="btn-floating btn-large right secondary-colour text-colour"><i class="material-icons small">done</i></button>
                    </form>
                }
                else
                {
                    <div class="custom-documentation">
                        @Html.Raw(Model.CustomDocumentation)
                    </div>
                }
                <div class="row">
                    <div class="col s11">
                        <h4>Properties</h4>
                    </div>
                    <div class="col s1">
                        <a class="expander btn-flat"><i class="material-icons">swap_vert</i></a>
                    </div>
                </div>
                <ul class="collapsible" data-collapsible="expandable">
                    @if (Model.FocusedContentTypeDoc.Properties != null)
                    {
                        foreach (var prop in Model.FocusedContentTypeDoc.Properties)
                        {
                            <li>
                                <div class="collapsible-header">
                                    <span title="Tab" class="badge">@prop.Tab</span>@prop.Name - @prop.Type
                                </div>
                                <div class="collapsible-body">
                                    <div>
                                        @if (!string.IsNullOrWhiteSpace(prop.Description))
                                        {
                                            <div class="description">@prop.Description</div>
                                        }
                                        @if (!string.IsNullOrWhiteSpace(prop.DefaultValue))
                                        {
                                            <div class="property">
                                                <span class="name">Default Value:</span>
                                                <span class="value">@prop.DefaultValue</span>
                                            </div>
                                        }
                                        <div class="property">
                                            <span class="name">Required:</span>
                                            <span class="value">@prop.IsRequired</span>
                                        </div>
                                        <div class="property">
                                            <span class="name">Searchable:</span>
                                            <span class="value">@prop.IsSearchable</span>
                                        </div>
                                        @if (prop.CustomAttributes != null && prop.CustomAttributes.Count > 0)
                                        {
                                            foreach (var attribute in prop.CustomAttributes)
                                            {
                                                <span class="property">
                                                    <span class="name">@attribute.Key:</span>
                                                    <span class="value">@attribute.Value</span>
                                                </span>
                                            }
                                        }
                                        @if (prop.AllowedTypes != null && prop.AllowedTypes.Count > 0)
                                        {
                                            <span class="property">
                                                <span class="name">Allowed types:</span>
                                                <span class="value content-type-links">
                                                    @foreach (var allowedType in prop.AllowedTypes)
                                                    {
                                                        if (allowedType.Value == "All")
                                                        {
                                                            <span>All</span>
                                                        }
                                                        else
                                                        {
                                                            <a href="@Paths.ToResource(typeof(DocumentationController), "documentation?ctid=" + allowedType.Key)">@allowedType.Value</a>
                                                        }
                                                    }
                                                </span>
                                            </span>
                                        }
                                    </div>
                                </div>
                            </li>
                        }
                    }
                </ul>
                @if (Model.FocusedContentTypeType == ContentTypeEnum.Page)
                {
                    var page = Model.FocusedContentTypeDoc as PageDoc;
                    <div class="row">
                        <ul class="col s6 content-type-links collection with-header">
                            <li class="collection-header"><h4>Child Pages Allowed</h4></li>
                            @if (page.AvaliablePages != null)
                            {
                                if (page.AvaliablePages.Count > 0)
                                {
                                    foreach (var p in page.AvaliablePages)
                                    {

                                        <li class="collection-item"><a href="@Paths.ToResource(typeof(DocumentationController), "documentation?ctid=" + p.Key)">@p.Value</a></li>
                                    }
                                }
                                else
                                {
                                    <li class="collection-item">All</li>
                                }
                            }
                            else
                            {
                                <li class="collection-item">None</li>
                            }
                        </ul>
                        @if (page.Access != null)
                        {
                        <ul class="col s6 collection with-header">
                            <li class="collection-header"><h4>Access Rights</h4></li>
                            @foreach (var a in page.Access)
                            {
                                <li class="collection-item"><span class="badge">@a.Value</span>@a.Key</li>
                            }
                        </ul>
                        }
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="heading primary-colour text-colour">
            @if (Model.CanEdit)
            {
                if (!Model.IsEditMode)
                {
                    <a class="btn-floating btn-large red right" href="@Paths.ToResource(typeof(DocumentationController), "documentation?edit=1&id=0")"><i class="small material-icons">mode_edit</i></a>
                }
            }
        </div>
        if (Model.IsEditMode)
        {
            <form action="@Url.Action("Save", "Documentation")">
                <input type="hidden" name="contentTypeId" id="contentTypeId" value="0" />
                <textarea name="markup" id="markup">@Html.Raw(Model.CustomDocumentation)</textarea>
                <button class="btn-floating btn-large waves-effect waves-light red right"><i class="material-icons small">done</i></button>
            </form>
        }
        else
        {
            <div class="custom-documentation">
                @Html.Raw(Model.CustomDocumentation)
            </div>
        }
    }

</main>
